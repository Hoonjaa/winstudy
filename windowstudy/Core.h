#pragma once

//Core(코어)?
//: 주요한 기능을 제공하고 전반적인 프로그램 구조 정의

//Singleton (싱글톤)
//: [클래스의 인스턴스가 단 하나만] 생성되도록 보장하는 소프트웨어 패턴

// 관리자는 여러명 -- 관리자를 총괄하는 사람! - 이름으로 존재
// 프로그래밍하다보면 헷갈릴 수 있어 없어
// 있지 -> 코어 클래스가 총괄하는 애 - (단 한 명만 존재하도록 하는 애가 싱글톤)

//class -> 속성, 행동(변수/함수), 생성자, 소멸자 등등... 6 special function 공부해오기
// 클래스를 생성(인스턴스 생성)을 하나로 제한하려면 -> 한번 생각해보라
//해상도 : 종이나 스크린 등에 표현된 그림이나 글씨 따위가 표현된 섬세한 정도

class Core {
	SINGLE(Core);
private:
	HWND		handle;			//클래스 내부에서 창 핸들 변수
	POINT		ptResoultion;	//해상도를 받을 변수
	HDC			hDC;			//그리기 위한 변수

	HBITMAP		hBit;
	HDC			mDC;
	

private :
	void		Update();
	void		Render();

public:
	int			Init(HWND _handle, POINT _ptResoultion);
	void		Progress();

	HWND		getMainHandle() {return handle;}
};

//객체생성을 하나로 제한하고자 함
//1. 생성자 소멸자 -> private으로 변경
//	멤버 함수로만 만들고 생성될 수 있다.

//2. 생성자, 소멸자를 private로 만들면 문제가 생긴다.
//	외부에서 객체 못만든다. (프라이빗이라서 생성자가 접근이 안돼)
// 
//	멤버함수와 멤버 변수에 접근이 가능한가?
//	안된다. 누가 함수를 호출했는지 알 수 없기에(this가 없음) 접근이 불가
//	멤버 없이 호출해야 돼 -> 정적 함수(static)

//3. 정적변수 (static) - 클래스 자체에 속한 함수 (객체 상태에 의존하지 X) - DATA 정적변수에 저장된 애들은 함수가 끝나고 그 값이 저장되어 있다.
//	1) 객체 없이 호출 가능함
//	2) 정적 멤버 함수는 내부 정적 멤버로만 접근이 가능하다.
//	정적 멤버는 무조건 클래스 외부에서 초기화 해줘야 한다.(링크 LNK오류)

//주기
//1. 프로그램 시작되서 생성되서 프로그램이 끝났을 때 없어지는 애들 -DATA영역(런타임)
//2. 중괄호에서 시작되서 중괄호 내에서 끝날 때 없어지는 애들 - STACK영역(컴파일)
//3. HEAP




//사용자 정의 자료형 struct,class
//struct: 모든 속성, 함수가 public
//class: 기본이 private, public으로 설정이 가능하다. 부분조건적으로 protected

// class 붕어빵 틀 -> 여러개 찍어낼 수 있어 -> 이러지 말고 하나만 찍어냅시다.
// 가장 큰 특징 정보 은닉
// 게임 유저 -> 게임프로그램
// 프로그래머 -> 게임 만들 때도(협업) hp, level 등등 속성들에 대해 쉽게 접근이 가능해도 될까?
// class(객체) private, public

//private: 외부에서 접근하지 마 (비공개 멤버, 클래스 내에서만 접근이 가능하다)
//pulic: 공개멤버, 클래스 외부에서 편히 갖다 써

/*class Core {
	std::string name;
	int* data;
	Core() {
		std::cout << "객체 생성";
		data = new int[100];
	}

	Core(std::string a) {
		name = a;		//매개변수 생성자
	}

	~Core() {
		std::cout << "객체 소멸";
		//동적할당 : 사용자 영역(HEAP)
		// -> 사용자가 직접 관리할 수 있단 말이야.
		// -> 얻어서 사용한 건 다시 컴퓨터한테 돌려줘야 됨
		// -> 메모리를 얻었으니 해제하는 작업이 필요하다.
		delete[] data;
	}
};*/

//생성자 : 클래스 객체가 생성될 때 호출되는 함수 -> 초기화 설정 작업을 보통 함
// 디폴트 생성자, 매개변수 생성자, 복사 생성자(**같은 클래스를 복사할건데 까다로우니 나중에)
//
//소멸자 : 객체가 메모리에서 해제될 때 호출되는 함수, 객체의 생명 주기가 끝나서 사라지기 전에 마무리 작업 진행

